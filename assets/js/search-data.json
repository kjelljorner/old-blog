{
  
    
        "post0": {
            "title": "Visualizing atomic type orbitals in molecules",
            "content": "Introduction . Sometimes we need to display atomic type orbitals in a schematic way to visualize simple concepts. The molecular orbitals or even localized orbitals are then overly complex. Simple examples are the ChemDraw-style orbitals, which are used to rationalize reactions in organic chemistry. Now, is it possible to obtain similar orbitals, but in 3D? . . Computing the 3D structure . We will use benzene as an example. First we generate the 3D coordinates using RDKit . from rdkit import Chem from rdkit.Chem import AllChem . smiles = &quot;c1ccccc1&quot; mol = Chem.MolFromSmiles(smiles) mol = Chem.AddHs(mol) mol . AllChem.EmbedMolecule(mol) AllChem.MMFFOptimizeMolecule(mol) . 0 . We visualize the structure using py3Dmol . import py3Dmol . v = py3Dmol.view() v.addModel(Chem.MolToMolBlock(mol), &#39;mol&#39;) v.setStyle({&#39;stick&#39;:{}}) . You appear to be running in JupyterLab (or JavaScript failed to load for some other reason). You need to install the 3dmol extension: jupyter labextension install jupyterlab_3dmol . &lt;py3Dmol.view at 0x13c3df400&gt; . Calculating the NAOs . We will now use PySCF to calculate the NAOs. As we are only interested in the schematic form of the orbitals, the small STO-3G basis set will be sufficient. First we construct the PySCF Mole object from the RDKit Mol object. . import pyscf from pyscf import gto, lo, tools, dft . elements = [atom.GetSymbol() for atom in mol.GetAtoms()] coordinates = mol.GetConformer().GetPositions() atoms = [(element, coordinate) for element, coordinate in zip(elements, coordinates)] pyscf_mole = gto.Mole(basis=&quot;sto-3g&quot;) pyscf_mole.atom = atoms pyscf_mole.build() . &lt;pyscf.gto.mole.Mole at 0x13c3fa610&gt; . We then run the DFT calculation, which is actually quite fast . mf = dft.RKS(pyscf_mole) mf.xc = &#39;b3lyp&#39; mf.run() . converged SCF energy = -229.25142113646 . &lt;pyscf.dft.rks.RKS at 0x139b613a0&gt; . We can now compute the NAOs from the 1-st order reduced density matrix. Note that we are here actually calculating the pre-orthogonal NAOs (PNAOs) that are even more local that the NAOs. We the write the PNAOs to cube files - these files can be quite large, ca 7 MB each. . dm = mf.make_rdm1() naos = lo.nao.prenao(pyscf_mole, dm) . for i in range(naos.shape[1]): tools.cubegen.orbital(pyscf_mole, &#39;benzene_nao_{:02d}.cube&#39;.format(i+1), naos[:,i]) . Visualizing the NAOs . Here we use py3Dmol and ipywidgets to interactively view the orbitals. . from ipywidgets import interact . def draw_orbital(view, i): with open(f&quot;./benzene_nao_{i:02d}.cube&quot;) as f: cube_data = f.read() view.addVolumetricData(cube_data, &quot;cube&quot;, {&#39;isoval&#39;: -0.04, &#39;color&#39;: &quot;red&quot;, &#39;opacity&#39;: 0.75}) view.addVolumetricData(cube_data, &quot;cube&quot;, {&#39;isoval&#39;: 0.04, &#39;color&#39;: &quot;blue&quot;, &#39;opacity&#39;: 0.75}) view.addModel(Chem.MolToMolBlock(mol), &#39;mol&#39;) view.setStyle({&#39;stick&#39;:{}}) view.zoomTo() view.update() view.clear() . view = py3Dmol.view(width=400,height=400) view.show() draw_orbital(view, 25) . You appear to be running in JupyterLab (or JavaScript failed to load for some other reason). You need to install the 3dmol extension: jupyter labextension install jupyterlab_3dmol . Interactive viewing . Unfortunately, the interactive viewer doesn&#39;t display on the blog. Try running the code below on Binder or locally on your machine. . from ipywidgets import fixed, interact_manual, interactive . n_orbitals = naos.shape[1] view = py3Dmol.view(width=400,height=400) view.show() interact_manual(draw_orbital, view=fixed(view), i=(1, n_orbitals)); . Acknowledgements . iwatobipen&#39;s blog post on the rendering of orbitals with py3Dmol was very helpful when writing this notebook. . Licensing and citation . Code free to use under an MIT license. . For citation, use webpage address and access date. .",
            "url": "https://kjelljorner.github.io/blog/computational_chemistry/2022/06/30/Visualizing-atomic.html",
            "relUrl": "/computational_chemistry/2022/06/30/Visualizing-atomic.html",
            "date": " • Jun 30, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Assigning chiral information with SMARTS templates",
            "content": "Introduction . Molecules can be described with undefined stereochemistry, for example by not specifiying whether a certain stereocenter is R or S. Here, we will investigate how we can fix the stereochemistry of such molecules based on a SMARTS template that matches (parts of) the molecule. This could be a useful trick for example with SMILES strings generated with STONED SELFIES that do not (yet) have chiral information. . Code . We import the usual RDKit packages and turn on stereo annotion of the images. . from rdkit import Chem from rdkit.Chem.Draw import IPythonConsole from rdkit.Chem import AllChem IPythonConsole.drawOptions.addStereoAnnotation = True IPythonConsole.ipython_useSVG=True . First we will generate the molecule without chiral information . smiles = &quot;C(Cl)(Br)CC&quot; mol = Chem.MolFromSmiles(smiles) display(mol) . Our goal is to convert this molecule into the reference below, which has a R configuration of the stereocenter. . smiles_ref = &quot;Br[C@@H](Cl)CC&quot; mol_ref = Chem.MolFromSmiles(smiles_ref) display(mol_ref) . We construct a SMARTS pattern with chiral information that will match the stereocenter. RDKit&#39;s visualization of SMARTS patterns is quite limited, and we could instead use SMARTSView to get a better view. . smarts = &quot;[C][C@@H]([Br])[Cl]&quot; pattern = Chem.MolFromSmarts(smarts) display(pattern) . We use the GetSubstructMatch method to obtain the atom indices of mol that match the pattern. They will be listed in the order of the atoms in the SMARTS pattern. The display of the Mol object is automatically updated to show the matched atoms. . match = mol.GetSubstructMatch(pattern) print(&quot;Matched indices:&quot;, match) display(mol) . Matched indices: (3, 0, 2, 1) . The key feature for determining chiral tags in RDKit is the order of the bonds in the Mol object. We will therefore use the following strategy: . Reorder the bonds in the Mol object so that they match the order in the SMARTS pattern | Set the chiral tags of each matched atom so that they match the SMARTS pattern | First, we find the indices of the bonds in mol that match those in pattern: . indices_matched = [] for bond in pattern.GetBonds(): i, j = bond.GetBeginAtomIdx(), bond.GetEndAtomIdx() bond = mol.GetBondBetweenAtoms(match[i], match[j]) indices_matched.append(bond.GetIdx()) print(&quot;Matched bond indices:&quot;, indices_matched) . Matched bond indices: [2, 1, 0] . Then we reorder the bond indices from mol so that the matched bonds (a) come before the unmatched ones and (b) have the same order as in pattern . indices_all = list(range(mol.GetNumBonds())) indices_rest = [i for i in indices_all if i not in indices_matched] indices_new = indices_matched + indices_rest print(&quot;Rest of bond indices:&quot;, indices_rest) print(&quot;New bond index order:&quot;, indices_new) . Rest of bond indices: [3] New bond index order: [2, 1, 0, 3] . To actually reorder the bonds, we need to create an editable RWMol object. We (a) remove all the bonds and then (b) add them back together in the new order. . rw_mol = Chem.RWMol(mol) bond_info = [] for bond in list(rw_mol.GetBonds()): bond_info.append((bond.GetBeginAtomIdx(), bond.GetEndAtomIdx(), bond.GetBondType())) rw_mol.RemoveBond(bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()) for i in indices_new: rw_mol.AddBond(*bond_info[i]) display(rw_mol) . Finally, we set the chiral tags of each matched atom to that of the SMARTS pattern and recover a new Mol object that matches the stereochemistry that we want. . for i, atom in enumerate(pattern.GetAtoms()): chiral_tag = atom.GetChiralTag() rw_mol.GetAtomWithIdx(match[i]).SetChiralTag(chiral_tag) mol_new = rw_mol.GetMol() Chem.SanitizeMol(mol_new) Chem.AssignCIPLabels(mol_new) Chem.Draw.MolsToGridImage([mol, mol_new, mol_ref], legends=[&quot;Original&quot;, &quot;Templated&quot;, &quot;Reference&quot;], molsPerRow=3, useSVG=True) . Function . Finally we can put everything together in one function: . def apply_chiral_template(mol, pattern): # Apply SMARTS pattern to Mol match = mol.GetSubstructMatch(pattern) # Find indices of matched bonds in Mol indices_matched = [] for bond in pattern.GetBonds(): i, j = bond.GetBeginAtomIdx(), bond.GetEndAtomIdx() bond = mol.GetBondBetweenAtoms(match[i], match[j]) indices_matched.append(bond.GetIdx()) # Reorder bond indices to match SMARTS pattern indices_all = list(range(mol.GetNumBonds())) indices_rest = [i for i in indices_all if i not in indices_matched] indices_new = indices_matched + indices_rest # Create new Mol. Delete and re-add bonds in new order rw_mol = Chem.RWMol(mol) bond_info = [] for bond in list(rw_mol.GetBonds()): bond_info.append((bond.GetBeginAtomIdx(), bond.GetEndAtomIdx(), bond.GetBondType())) rw_mol.RemoveBond(bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()) for i in indices_new: rw_mol.AddBond(*bond_info[i]) # Set chiral tags from template to new Mol for i, atom in enumerate(pattern.GetAtoms()): chiral_tag = atom.GetChiralTag() rw_mol.GetAtomWithIdx(match[i]).SetChiralTag(chiral_tag) # Recover new Mol new_mol = rw_mol.GetMol() Chem.SanitizeMol(new_mol) return new_mol . More complex example . Now we will use the function on a more complex example with four stereocenters. Note that R and S labels depend on the CIP order of the substituents, which is not defined in terms of the wildcard atom &quot;*&quot; . smiles = &quot;CC1C(C)C2CCC1C2&quot; mol = Chem.MolFromSmiles(smiles) smiles_ref = &quot;C[C@@H]1[C@H](C)[C@H]2CC[C@@H]1C2&quot; mol_ref = Chem.MolFromSmiles(smiles_ref) smarts = &quot;[*][C@@H]1[C@H]([*])[C@H]2CC[C@@H]1C2&quot; pattern = Chem.MolFromSmarts(smarts) Chem.SanitizeMol(pattern) # Needed to avoid bug in MolsToGridImage Chem.Draw.MolsToGridImage([mol, mol_ref, pattern], legends=[&quot;Undefined&quot;, &quot;Defined&quot;, &quot;SMARTS&quot;], useSVG=True) . To get the right CIP labels, we need to apply the function AssignCIPLabels but that should not be crucial except for visualization. . mol_new = apply_chiral_template(mol, pattern) Chem.AssignCIPLabels(mol_new) Chem.Draw.MolsToGridImage([mol, mol_new, mol_ref], legends=[&quot;Original&quot;, &quot;Templated&quot;, &quot;Reference&quot;], molsPerRow=3, useSVG=True) . Licensing and citation . Code free to use under an MIT license. . For citation, use webpage address and access date. .",
            "url": "https://kjelljorner.github.io/blog/cheminformatics/2021/10/15/Chiral-templating.html",
            "relUrl": "/cheminformatics/2021/10/15/Chiral-templating.html",
            "date": " • Oct 15, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Kjell Jorner",
          "content": ". I’m a postdoctoral researcher applying machine learning and artificial intelligence for inverse design of molecules and chemical reactivity in Alán Aspuru-Guzik’s Matter Lab at the University of Toronto. I’m also associated with Chalmers University of Technology in Gothenburg, Sweden and the group of Martin Rahm. . From January 2023, I will be an Assistant Professor of Digital Chemistry at ETH Zurich. . All views my own. .",
          "url": "https://kjelljorner.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kjelljorner.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}