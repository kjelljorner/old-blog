{
  
    
        "post0": {
            "title": "Assigning chiral information with SMARTS templates",
            "content": "Introduction . Molecules can be described with undefined stereochemistry, for example by not specifiying whether a certain stereocenter is R or S. Here, we will investigate how we can fix the stereochemistry of such molecules based on a SMARTS template that matches (parts of) the molecule. This could be a useful trick for example with SMILES strings generated with STONED SELFIES that do not (yet) have chiral information. . Code . We import the usual RDKit packages and turn on stereo annotion of the images. . from rdkit import Chem from rdkit.Chem.Draw import IPythonConsole from rdkit.Chem import AllChem IPythonConsole.drawOptions.addStereoAnnotation = True IPythonConsole.ipython_useSVG=True . First we will generate the molecule without chiral information . smiles = &quot;C(Cl)(Br)CC&quot; mol = Chem.MolFromSmiles(smiles) display(mol) . Our goal is to convert this molecule into the reference below, which has a R configuration of the stereocenter. . smiles_ref = &quot;Br[C@@H](Cl)CC&quot; mol_ref = Chem.MolFromSmiles(smiles_ref) display(mol_ref) . We construct a SMARTS pattern with chiral information that will match the stereocenter. RDKit&#39;s visualization of SMARTS patterns is quite limited, and we could instead use SMARTSView to get a better view. . smarts = &quot;[C][C@@H]([Br])[Cl]&quot; pattern = Chem.MolFromSmarts(smarts) display(pattern) . We use the GetSubstructMatch method to obtain the atom indices of mol that match the pattern. They will be listed in the order of the atoms in the SMARTS pattern. The display of the Mol object is automatically updated to show the matched atoms. . match = mol.GetSubstructMatch(pattern) print(&quot;Matched indices:&quot;, match) display(mol) . Matched indices: (3, 0, 2, 1) . The key feature for determining chiral tags in RDKit is the order of the bonds in the Mol object. We will therefore use the following strategy: . Reorder the bonds in the Mol object so that they match the order in the SMARTS pattern | Set the chiral tags of each matched atom so that they match the SMARTS pattern | First, we find the indices of the bonds in mol that match those in pattern: . indices_matched = [] for bond in pattern.GetBonds(): i, j = bond.GetBeginAtomIdx(), bond.GetEndAtomIdx() bond = mol.GetBondBetweenAtoms(match[i], match[j]) indices_matched.append(bond.GetIdx()) print(&quot;Matched bond indices:&quot;, indices_matched) . Matched bond indices: [2, 1, 0] . Then we reorder the bond indices from mol so that the matched bonds (a) come before the unmatched ones and (b) have the same order as in pattern . indices_all = list(range(mol.GetNumBonds())) indices_rest = [i for i in indices_all if i not in indices_matched] indices_new = indices_matched + indices_rest print(&quot;Rest of bond indices:&quot;, indices_rest) print(&quot;New bond index order:&quot;, indices_new) . Rest of bond indices: [3] New bond index order: [2, 1, 0, 3] . To actually reorder the bonds, we need to create an editable RWMol object. We (a) remove all the bonds and then (b) add them back together in the new order. . rw_mol = Chem.RWMol(mol) bond_info = [] for bond in list(rw_mol.GetBonds()): bond_info.append((bond.GetBeginAtomIdx(), bond.GetEndAtomIdx(), bond.GetBondType())) rw_mol.RemoveBond(bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()) for i in indices_new: rw_mol.AddBond(*bond_info[i]) display(rw_mol) . Finally, we set the chiral tags of each matched atom to that of the SMARTS pattern and recover a new Mol object that matches the stereochemistry that we want. . for i, atom in enumerate(pattern.GetAtoms()): chiral_tag = atom.GetChiralTag() rw_mol.GetAtomWithIdx(match[i]).SetChiralTag(chiral_tag) mol_new = rw_mol.GetMol() Chem.SanitizeMol(mol_new) Chem.AssignCIPLabels(mol_new) Chem.Draw.MolsToGridImage([mol, mol_new, mol_ref], legends=[&quot;Original&quot;, &quot;Templated&quot;, &quot;Reference&quot;], molsPerRow=3, useSVG=True) . Function . Finally we can put everything together in one function: . def apply_chiral_template(mol, pattern): # Apply SMARTS pattern to Mol match = mol.GetSubstructMatch(pattern) # Find indices of matched bonds in Mol indices_matched = [] for bond in pattern.GetBonds(): i, j = bond.GetBeginAtomIdx(), bond.GetEndAtomIdx() bond = mol.GetBondBetweenAtoms(match[i], match[j]) indices_matched.append(bond.GetIdx()) # Reorder bond indices to match SMARTS pattern indices_all = list(range(mol.GetNumBonds())) indices_rest = [i for i in indices_all if i not in indices_matched] indices_new = indices_matched + indices_rest # Create new Mol. Delete and re-add bonds in new order rw_mol = Chem.RWMol(mol) bond_info = [] for bond in list(rw_mol.GetBonds()): bond_info.append((bond.GetBeginAtomIdx(), bond.GetEndAtomIdx(), bond.GetBondType())) rw_mol.RemoveBond(bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()) for i in indices_new: rw_mol.AddBond(*bond_info[i]) # Set chiral tags from template to new Mol for i, atom in enumerate(pattern.GetAtoms()): chiral_tag = atom.GetChiralTag() rw_mol.GetAtomWithIdx(match[i]).SetChiralTag(chiral_tag) # Recover new Mol new_mol = rw_mol.GetMol() Chem.SanitizeMol(new_mol) return new_mol . More complex example . Now we will use the function on a more complex example with four stereocenters. Note that R and S labels depend on the CIP order of the substituents, which is not defined in terms of the wildcard atom &quot;*&quot; . smiles = &quot;CC1C(C)C2CCC1C2&quot; mol = Chem.MolFromSmiles(smiles) smiles_ref = &quot;C[C@@H]1[C@H](C)[C@H]2CC[C@@H]1C2&quot; mol_ref = Chem.MolFromSmiles(smiles_ref) smarts = &quot;[*][C@@H]1[C@H]([*])[C@H]2CC[C@@H]1C2&quot; pattern = Chem.MolFromSmarts(smarts) Chem.SanitizeMol(pattern) # Needed to avoid bug in MolsToGridImage Chem.Draw.MolsToGridImage([mol, mol_ref, pattern], legends=[&quot;Undefined&quot;, &quot;Defined&quot;, &quot;SMARTS&quot;], useSVG=True) . To get the right CIP labels, we need to apply the function AssignCIPLabels but that should not be crucial except for visualization. . mol_new = apply_chiral_template(mol, pattern) Chem.AssignCIPLabels(mol_new) Chem.Draw.MolsToGridImage([mol, mol_new, mol_ref], legends=[&quot;Original&quot;, &quot;Templated&quot;, &quot;Reference&quot;], molsPerRow=3, useSVG=True) .",
            "url": "https://kjelljorner.github.io/blog_test/2021/10/14/linked_notebook.html",
            "relUrl": "/2021/10/14/linked_notebook.html",
            "date": " • Oct 14, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Assigning chiral information with SMARTS templates",
            "content": "Introduction . Molecules can be described with undefined stereochemistry, for example by not specifiying whether a certain stereocenter is R or S. Here, we will investigate how we can fix the stereochemistry of such molecules based on a SMARTS template that matches (parts of) the molecule. This could be a useful trick for example with SMILES strings generated with STONED SELFIES that do not (yet) have chiral information. . Code . We import the usual RDKit packages and turn on stereo annotion of the images. . from rdkit import Chem from rdkit.Chem.Draw import IPythonConsole from rdkit.Chem import AllChem IPythonConsole.drawOptions.addStereoAnnotation = True IPythonConsole.ipython_useSVG=True . First we will generate the molecule without chiral information . smiles = &quot;C(Cl)(Br)CC&quot; mol = Chem.MolFromSmiles(smiles) display(mol) . Our goal is to convert this molecule into the reference below, which has a R configuration of the stereocenter. . smiles_ref = &quot;Br[C@@H](Cl)CC&quot; mol_ref = Chem.MolFromSmiles(smiles_ref) display(mol_ref) . We construct a SMARTS pattern with chiral information that will match the stereocenter. RDKit&#39;s visualization of SMARTS patterns is quite limited, and we could instead use SMARTSView to get a better view. . smarts = &quot;[C][C@@H]([Br])[Cl]&quot; pattern = Chem.MolFromSmarts(smarts) display(pattern) . We use the GetSubstructMatch method to obtain the atom indices of mol that match the pattern. They will be listed in the order of the atoms in the SMARTS pattern. The display of the Mol object is automatically updated to show the matched atoms. . match = mol.GetSubstructMatch(pattern) print(&quot;Matched indices:&quot;, match) display(mol) . Matched indices: (3, 0, 2, 1) . The key feature for determining chiral tags in RDKit is the order of the bonds in the Mol object. We will therefore use the following strategy: . Reorder the bonds in the Mol object so that they match the order in the SMARTS pattern | Set the chiral tags of each matched atom so that they match the SMARTS pattern | First, we find the indices of the bonds in mol that match those in pattern: . indices_matched = [] for bond in pattern.GetBonds(): i, j = bond.GetBeginAtomIdx(), bond.GetEndAtomIdx() bond = mol.GetBondBetweenAtoms(match[i], match[j]) indices_matched.append(bond.GetIdx()) print(&quot;Matched bond indices:&quot;, indices_matched) . Matched bond indices: [2, 1, 0] . Then we reorder the bond indices from mol so that the matched bonds (a) come before the unmatched ones and (b) have the same order as in pattern . indices_all = list(range(mol.GetNumBonds())) indices_rest = [i for i in indices_all if i not in indices_matched] indices_new = indices_matched + indices_rest print(&quot;Rest of bond indices:&quot;, indices_rest) print(&quot;New bond index order:&quot;, indices_new) . Rest of bond indices: [3] New bond index order: [2, 1, 0, 3] . To actually reorder the bonds, we need to create an editable RWMol object. We (a) remove all the bonds and then (b) add them back together in the new order. . rw_mol = Chem.RWMol(mol) bond_info = [] for bond in list(rw_mol.GetBonds()): bond_info.append((bond.GetBeginAtomIdx(), bond.GetEndAtomIdx(), bond.GetBondType())) rw_mol.RemoveBond(bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()) for i in indices_new: rw_mol.AddBond(*bond_info[i]) display(rw_mol) . Finally, we set the chiral tags of each matched atom to that of the SMARTS pattern and recover a new Mol object that matches the stereochemistry that we want. . for i, atom in enumerate(pattern.GetAtoms()): chiral_tag = atom.GetChiralTag() rw_mol.GetAtomWithIdx(match[i]).SetChiralTag(chiral_tag) mol_new = rw_mol.GetMol() Chem.SanitizeMol(mol_new) Chem.AssignCIPLabels(mol_new) Chem.Draw.MolsToGridImage([mol, mol_new, mol_ref], legends=[&quot;Original&quot;, &quot;Templated&quot;, &quot;Reference&quot;], molsPerRow=3, useSVG=True) . Function . Finally we can put everything together in one function: . def apply_chiral_template(mol, pattern): # Apply SMARTS pattern to Mol match = mol.GetSubstructMatch(pattern) # Find indices of matched bonds in Mol indices_matched = [] for bond in pattern.GetBonds(): i, j = bond.GetBeginAtomIdx(), bond.GetEndAtomIdx() bond = mol.GetBondBetweenAtoms(match[i], match[j]) indices_matched.append(bond.GetIdx()) # Reorder bond indices to match SMARTS pattern indices_all = list(range(mol.GetNumBonds())) indices_rest = [i for i in indices_all if i not in indices_matched] indices_new = indices_matched + indices_rest # Create new Mol. Delete and re-add bonds in new order rw_mol = Chem.RWMol(mol) bond_info = [] for bond in list(rw_mol.GetBonds()): bond_info.append((bond.GetBeginAtomIdx(), bond.GetEndAtomIdx(), bond.GetBondType())) rw_mol.RemoveBond(bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()) for i in indices_new: rw_mol.AddBond(*bond_info[i]) # Set chiral tags from template to new Mol for i, atom in enumerate(pattern.GetAtoms()): chiral_tag = atom.GetChiralTag() rw_mol.GetAtomWithIdx(match[i]).SetChiralTag(chiral_tag) # Recover new Mol new_mol = rw_mol.GetMol() Chem.SanitizeMol(new_mol) return new_mol . More complex example . Now we will use the function on a more complex example with four stereocenters. Note that R and S labels depend on the CIP order of the substituents, which is not defined in terms of the wildcard atom &quot;*&quot; . smiles = &quot;CC1C(C)C2CCC1C2&quot; mol = Chem.MolFromSmiles(smiles) smiles_ref = &quot;C[C@@H]1[C@H](C)[C@H]2CC[C@@H]1C2&quot; mol_ref = Chem.MolFromSmiles(smiles_ref) smarts = &quot;[*][C@@H]1[C@H]([*])[C@H]2CC[C@@H]1C2&quot; pattern = Chem.MolFromSmarts(smarts) Chem.SanitizeMol(pattern) # Needed to avoid bug in MolsToGridImage Chem.Draw.MolsToGridImage([mol, mol_ref, pattern], legends=[&quot;Undefined&quot;, &quot;Defined&quot;, &quot;SMARTS&quot;], useSVG=True) . To get the right CIP labels, we need to apply the function AssignCIPLabels but that should not be crucial except for visualization. . mol_new = apply_chiral_template(mol, pattern) Chem.AssignCIPLabels(mol_new) Chem.Draw.MolsToGridImage([mol, mol_new, mol_ref], legends=[&quot;Original&quot;, &quot;Templated&quot;, &quot;Reference&quot;], molsPerRow=3, useSVG=True) .",
            "url": "https://kjelljorner.github.io/blog_test/2021/10/14/chiral_templating.html",
            "relUrl": "/2021/10/14/chiral_templating.html",
            "date": " • Oct 14, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Stereochemistry and reactivity",
            "content": "from rdkit import Chem from rdkit.Chem import AllChem from rdkit.Chem.Draw import IPythonConsole IPythonConsole.drawOptions.addStereoAnnotation = True from polanyi.io import get_xyz_string from polanyi.xtb import opt_xtb, XTBCalculator from polanyi.workflow import opt_constrained_complex, opt_ts_python from polanyi.interpolation import interpolate_geodesic from polanyi.data import HARTREE_TO_KCAL import py3Dmol . def view_py3Dmol(elements, coordinates, width=300, height=300, scale=0.3, show_indices=False): view = py3Dmol.view(width=width, height=height) view.addModel(get_xyz_string(elements, coordinates), &quot;xyz&quot;) view.setStyle({&#39;sphere&#39;: {&quot;scale&quot;: scale}, &#39;stick&#39;:{}}) if show_indices == True: view.addPropertyLabels(&quot;index&quot;, True, {&quot;fontColor&quot;: &quot;black&quot;, &quot;showBackground&quot;: False, &quot;alignment&quot;: &quot;center&quot;}) return view . smiles_de = &quot;C1=CCC=C1&quot; smiles_dp = &quot;O=C(C=C1)OC1=O&quot; smiles_p = &quot;O=C1OC(C2C3C=CC(C3)C21)=O&quot; mol_de = Chem.MolFromSmiles(smiles_de) mol_dp = Chem.MolFromSmiles(smiles_dp) mol_p = Chem.MolFromSmiles(smiles_p) Chem.Draw.MolsToGridImage([mol_de, mol_dp, mol_p], legends=[&quot;Cyclopentadiene&quot;, &quot;Maleic anhydride&quot;, &quot;Product&quot;], molsPerRow=3) . In fact, four new stereocenters are formed during the reaction, and due to the stereospecificity of the Diels-Alder reaction, we can either the &quot;exo&quot; or the &quot;endo&quot; form of the product. They actualy differ in the configuration of two out of four stereocenters, and are therefore diastereomers. We therefore expect them to show different activation energies for formation via diasteromeric transition states. . smiles_p_endo = &quot;O=C1OC([C@H]2[C@@H]3C=C[C@@H](C3)[C@H]21)=O&quot; smiles_p_exo = &quot;O=C1OC([C@@H]2[C@@H]3C=C[C@@H](C3)[C@@H]21)=O&quot; mol_p_endo = Chem.MolFromSmiles(smiles_p_endo) mol_p_exo = Chem.MolFromSmiles(smiles_p_exo) Chem.Draw.MolsToGridImage([mol_p_endo, mol_p_exo], legends=[&quot;Endo&quot;, &quot;Exo&quot;], molsPerRow=2) . Optimizing the products . We will: . Generate the two different products in 3D with the right stereochemistry | Generate reactant complexes with the right stereochemistry | Optimize the two different TS structures | Calculate the activation energy compared to the separated reactants. | mol_p_endo = Chem.AddHs(mol_p_endo) AllChem.EmbedMolecule(mol_p_endo, useSmallRingTorsions=True, useMacrocycleTorsions=True, ETversion=2) AllChem.MMFFOptimizeMolecule(mol_p_endo) elements_endo = [atom.GetSymbol() for atom in mol_p_endo.GetAtoms()] coordinates_p_endo = mol_p_endo.GetConformer().GetPositions() keywords = [&quot;--gfnff&quot;] coordinates_p_endo = opt_xtb(elements_endo, coordinates_p_endo, keywords=keywords) . view_py3Dmol(elements_endo, coordinates_p_endo, show_indices=True) . You appear to be running in JupyterLab (or JavaScript failed to load for some other reason). You need to install the 3dmol extension: jupyter labextension install jupyterlab_3dmol . &lt;py3Dmol.view at 0x7f9d21fe2df0&gt; . mol_p_exo = Chem.AddHs(mol_p_exo) AllChem.EmbedMolecule(mol_p_exo, useSmallRingTorsions=True, useMacrocycleTorsions=True, ETversion=2) AllChem.MMFFOptimizeMolecule(mol_p_exo) keywords = [&quot;--gfnff&quot;] elements_exo = [atom.GetSymbol() for atom in mol_p_exo.GetAtoms()] coordinates_p_exo = mol_p_exo.GetConformer().GetPositions() coordinates_p_exo = opt_constrained_complex(elements_exo, coordinates_p_exo, keywords=keywords) . view_py3Dmol(elements_exo, coordinates_p_exo, show_indices=True) . You appear to be running in JupyterLab (or JavaScript failed to load for some other reason). You need to install the 3dmol extension: jupyter labextension install jupyterlab_3dmol . &lt;py3Dmol.view at 0x7f9d21fe2850&gt; . Optimizing the reactant complexes . We will now use bond constraints to optimize a good guess structure for reactant complexes of both endo and exo. Then we release the constraints to get a relaxed reactant complex geometry. . distance_constraints = {(6, 5): 3.0, (9, 11): 3.0} keywords = [&quot;--gfnff&quot;] coordinates_r_endo = opt_constrained_complex(elements_endo, coordinates_p_endo, distance_constraints=distance_constraints, keywords=keywords) coordinates_r_endo = opt_xtb(elements_endo, coordinates_r_endo, keywords=keywords) . view_py3Dmol(elements_endo, coordinates_r_endo) . You appear to be running in JupyterLab (or JavaScript failed to load for some other reason). You need to install the 3dmol extension: jupyter labextension install jupyterlab_3dmol . &lt;py3Dmol.view at 0x7f9d21ffa580&gt; . distance_constraints = {(6, 5): 3.0, (9, 11): 3.0} keywords = [&quot;--gfnff&quot;] coordinates_r_exo = opt_constrained_complex(elements_exo, coordinates_p_exo, distance_constraints=distance_constraints, keywords=keywords) coordinates_r_exo = opt_xtb(elements_exo, coordinates_r_exo, keywords=keywords) . view_py3Dmol(elements_exo, coordinates_r_exo) . You appear to be running in JupyterLab (or JavaScript failed to load for some other reason). You need to install the 3dmol extension: jupyter labextension install jupyterlab_3dmol . &lt;py3Dmol.view at 0x7f9d21b22af0&gt; . Optimizing the transiton states . We now optimize the transition states with polanyi as in previous tutorials . n_images = 9 path = interpolate_geodesic(elements_endo, [coordinates_r_endo, coordinates_p_endo], n_images=n_images) coordinates_guess_endo = path[n_images // 2] results = opt_ts_python(elements_endo, [coordinates_r_endo, coordinates_p_endo], coordinates_guess_endo) coordinates_ts_endo = results.coordinates_opt e_ts_endo = results.opt_results.energies_diabatic[-1][0] . view_py3Dmol(elements_endo, coordinates_ts_endo) . You appear to be running in JupyterLab (or JavaScript failed to load for some other reason). You need to install the 3dmol extension: jupyter labextension install jupyterlab_3dmol . &lt;py3Dmol.view at 0x7f9d21ffafa0&gt; . n_images = 9 path = interpolate_geodesic(elements_exo, [coordinates_r_exo, coordinates_p_exo], n_images=n_images) coordinates_guess_exo = path[n_images // 2] results = opt_ts_python(elements_exo, [coordinates_r_exo, coordinates_p_exo], coordinates_guess_exo) coordinates_ts_exo = results.coordinates_opt e_ts_exo = results.opt_results.energies_diabatic[-1][0] . view_py3Dmol(elements_exo, coordinates_ts_exo) . You appear to be running in JupyterLab (or JavaScript failed to load for some other reason). You need to install the 3dmol extension: jupyter labextension install jupyterlab_3dmol . &lt;py3Dmol.view at 0x7f9d21ffaf70&gt; . Optimizing the separated reactants . We finally optimize the separated reactants and calculate their energy and compute the activation energy . mol_de = Chem.AddHs(mol_de) AllChem.EmbedMolecule(mol_de, useSmallRingTorsions=True, useMacrocycleTorsions=True, ETversion=2) elements_de = [atom.GetSymbol() for atom in mol_de.GetAtoms()] coordinates_de = mol_de.GetConformer().GetPositions() keywords = [&quot;--gfnff&quot;] coordinates_de = opt_constrained_complex(elements_de, coordinates_de, keywords=keywords) calc_de = XTBCalculator(elements_de, coordinates_de, method=&quot;GFNFF&quot;) e_de, _ = calc_de.sp() . mol_dp = Chem.AddHs(mol_dp) AllChem.EmbedMolecule(mol_dp, useSmallRingTorsions=True, useMacrocycleTorsions=True, ETversion=2) elements_dp = [atom.GetSymbol() for atom in mol_dp.GetAtoms()] coordinates_dp = mol_dp.GetConformer().GetPositions() keywords = [&quot;--gfnff&quot;] coordinates_dp = opt_constrained_complex(elements_dp, coordinates_dp, keywords=keywords) calc_dp = XTBCalculator(elements_dp, coordinates_dp, method=&quot;GFNFF&quot;) e_dp, _ = calc_dp.sp() . activation_energy_endo = e_ts_endo - e_de - e_dp activation_energy_exo = e_ts_exo - e_de - e_dp print(f&quot;Activation energy, endo: {activation_energy_endo * HARTREE_TO_KCAL:.2f} kcal/mol&quot;) print(f&quot;Activation energy, exo: {activation_energy_exo * HARTREE_TO_KCAL:.2f} kcal/mol&quot;) . Activation energy, endo: 49.52 kcal/mol Activation energy, exo: 49.54 kcal/mol . It turns out that the activation energy with this method is almost the same, although as expected it is not exactly the same. The question of endo/exo selectivity is quite complex. .",
            "url": "https://kjelljorner.github.io/blog_test/2021/10/14/_stereochemistry.html",
            "relUrl": "/2021/10/14/_stereochemistry.html",
            "date": " • Oct 14, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kjelljorner.github.io/blog_test/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kjelljorner.github.io/blog_test/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kjelljorner.github.io/blog_test/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kjelljorner.github.io/blog_test/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}